// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: playlist.proto

package playlist_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaylistV1Client is the client API for PlaylistV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaylistV1Client interface {
	AddSong(ctx context.Context, in *AddSongRequest, opts ...grpc.CallOption) (*AddSongResponse, error)
	Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayResponse, error)
	Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error)
	Next(ctx context.Context, in *NextRequest, opts ...grpc.CallOption) (*NextResponse, error)
	Prev(ctx context.Context, in *PrevRequest, opts ...grpc.CallOption) (*PrevResponse, error)
}

type playlistV1Client struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistV1Client(cc grpc.ClientConnInterface) PlaylistV1Client {
	return &playlistV1Client{cc}
}

func (c *playlistV1Client) AddSong(ctx context.Context, in *AddSongRequest, opts ...grpc.CallOption) (*AddSongResponse, error) {
	out := new(AddSongResponse)
	err := c.cc.Invoke(ctx, "/music_playlist_v1.Playlist_v1/AddSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistV1Client) Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayResponse, error) {
	out := new(PlayResponse)
	err := c.cc.Invoke(ctx, "/music_playlist_v1.Playlist_v1/Play", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistV1Client) Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error) {
	out := new(PauseResponse)
	err := c.cc.Invoke(ctx, "/music_playlist_v1.Playlist_v1/Pause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistV1Client) Next(ctx context.Context, in *NextRequest, opts ...grpc.CallOption) (*NextResponse, error) {
	out := new(NextResponse)
	err := c.cc.Invoke(ctx, "/music_playlist_v1.Playlist_v1/Next", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistV1Client) Prev(ctx context.Context, in *PrevRequest, opts ...grpc.CallOption) (*PrevResponse, error) {
	out := new(PrevResponse)
	err := c.cc.Invoke(ctx, "/music_playlist_v1.Playlist_v1/Prev", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaylistV1Server is the server API for PlaylistV1 service.
// All implementations must embed UnimplementedPlaylistV1Server
// for forward compatibility
type PlaylistV1Server interface {
	AddSong(context.Context, *AddSongRequest) (*AddSongResponse, error)
	Play(context.Context, *PlayRequest) (*PlayResponse, error)
	Pause(context.Context, *PauseRequest) (*PauseResponse, error)
	Next(context.Context, *NextRequest) (*NextResponse, error)
	Prev(context.Context, *PrevRequest) (*PrevResponse, error)
	mustEmbedUnimplementedPlaylistV1Server()
}

// UnimplementedPlaylistV1Server must be embedded to have forward compatible implementations.
type UnimplementedPlaylistV1Server struct {
}

func (UnimplementedPlaylistV1Server) AddSong(context.Context, *AddSongRequest) (*AddSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSong not implemented")
}
func (UnimplementedPlaylistV1Server) Play(context.Context, *PlayRequest) (*PlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Play not implemented")
}
func (UnimplementedPlaylistV1Server) Pause(context.Context, *PauseRequest) (*PauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedPlaylistV1Server) Next(context.Context, *NextRequest) (*NextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Next not implemented")
}
func (UnimplementedPlaylistV1Server) Prev(context.Context, *PrevRequest) (*PrevResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prev not implemented")
}
func (UnimplementedPlaylistV1Server) mustEmbedUnimplementedPlaylistV1Server() {}

// UnsafePlaylistV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaylistV1Server will
// result in compilation errors.
type UnsafePlaylistV1Server interface {
	mustEmbedUnimplementedPlaylistV1Server()
}

func RegisterPlaylistV1Server(s grpc.ServiceRegistrar, srv PlaylistV1Server) {
	s.RegisterService(&PlaylistV1_ServiceDesc, srv)
}

func _PlaylistV1_AddSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistV1Server).AddSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music_playlist_v1.Playlist_v1/AddSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistV1Server).AddSong(ctx, req.(*AddSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistV1_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistV1Server).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music_playlist_v1.Playlist_v1/Play",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistV1Server).Play(ctx, req.(*PlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistV1_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistV1Server).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music_playlist_v1.Playlist_v1/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistV1Server).Pause(ctx, req.(*PauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistV1_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistV1Server).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music_playlist_v1.Playlist_v1/Next",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistV1Server).Next(ctx, req.(*NextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistV1_Prev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrevRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistV1Server).Prev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music_playlist_v1.Playlist_v1/Prev",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistV1Server).Prev(ctx, req.(*PrevRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaylistV1_ServiceDesc is the grpc.ServiceDesc for PlaylistV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaylistV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "music_playlist_v1.Playlist_v1",
	HandlerType: (*PlaylistV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSong",
			Handler:    _PlaylistV1_AddSong_Handler,
		},
		{
			MethodName: "Play",
			Handler:    _PlaylistV1_Play_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _PlaylistV1_Pause_Handler,
		},
		{
			MethodName: "Next",
			Handler:    _PlaylistV1_Next_Handler,
		},
		{
			MethodName: "Prev",
			Handler:    _PlaylistV1_Prev_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playlist.proto",
}
