// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: playlist.proto

package player_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaylistV1Client is the client API for PlaylistV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaylistV1Client interface {
	Create(ctx context.Context, in *CreatePlaylistRequest, opts ...grpc.CallOption) (*CreatePlaylistResponse, error)
	Get(ctx context.Context, in *GetPlaylistRequest, opts ...grpc.CallOption) (*GetPlaylistResponse, error)
	Update(ctx context.Context, in *UpdatePlaylistRequest, opts ...grpc.CallOption) (*UpdatePlaylistResponse, error)
	Delete(ctx context.Context, in *DeletePlaylistRequest, opts ...grpc.CallOption) (*DeletePlaylistResponse, error)
}

type playlistV1Client struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistV1Client(cc grpc.ClientConnInterface) PlaylistV1Client {
	return &playlistV1Client{cc}
}

func (c *playlistV1Client) Create(ctx context.Context, in *CreatePlaylistRequest, opts ...grpc.CallOption) (*CreatePlaylistResponse, error) {
	out := new(CreatePlaylistResponse)
	err := c.cc.Invoke(ctx, "/music_player_v1.Playlist_v1/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistV1Client) Get(ctx context.Context, in *GetPlaylistRequest, opts ...grpc.CallOption) (*GetPlaylistResponse, error) {
	out := new(GetPlaylistResponse)
	err := c.cc.Invoke(ctx, "/music_player_v1.Playlist_v1/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistV1Client) Update(ctx context.Context, in *UpdatePlaylistRequest, opts ...grpc.CallOption) (*UpdatePlaylistResponse, error) {
	out := new(UpdatePlaylistResponse)
	err := c.cc.Invoke(ctx, "/music_player_v1.Playlist_v1/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistV1Client) Delete(ctx context.Context, in *DeletePlaylistRequest, opts ...grpc.CallOption) (*DeletePlaylistResponse, error) {
	out := new(DeletePlaylistResponse)
	err := c.cc.Invoke(ctx, "/music_player_v1.Playlist_v1/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaylistV1Server is the server API for PlaylistV1 service.
// All implementations must embed UnimplementedPlaylistV1Server
// for forward compatibility
type PlaylistV1Server interface {
	Create(context.Context, *CreatePlaylistRequest) (*CreatePlaylistResponse, error)
	Get(context.Context, *GetPlaylistRequest) (*GetPlaylistResponse, error)
	Update(context.Context, *UpdatePlaylistRequest) (*UpdatePlaylistResponse, error)
	Delete(context.Context, *DeletePlaylistRequest) (*DeletePlaylistResponse, error)
	mustEmbedUnimplementedPlaylistV1Server()
}

// UnimplementedPlaylistV1Server must be embedded to have forward compatible implementations.
type UnimplementedPlaylistV1Server struct {
}

func (UnimplementedPlaylistV1Server) Create(context.Context, *CreatePlaylistRequest) (*CreatePlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPlaylistV1Server) Get(context.Context, *GetPlaylistRequest) (*GetPlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPlaylistV1Server) Update(context.Context, *UpdatePlaylistRequest) (*UpdatePlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPlaylistV1Server) Delete(context.Context, *DeletePlaylistRequest) (*DeletePlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPlaylistV1Server) mustEmbedUnimplementedPlaylistV1Server() {}

// UnsafePlaylistV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaylistV1Server will
// result in compilation errors.
type UnsafePlaylistV1Server interface {
	mustEmbedUnimplementedPlaylistV1Server()
}

func RegisterPlaylistV1Server(s grpc.ServiceRegistrar, srv PlaylistV1Server) {
	s.RegisterService(&PlaylistV1_ServiceDesc, srv)
}

func _PlaylistV1_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistV1Server).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music_player_v1.Playlist_v1/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistV1Server).Create(ctx, req.(*CreatePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistV1_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistV1Server).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music_player_v1.Playlist_v1/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistV1Server).Get(ctx, req.(*GetPlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistV1_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistV1Server).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music_player_v1.Playlist_v1/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistV1Server).Update(ctx, req.(*UpdatePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistV1_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistV1Server).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music_player_v1.Playlist_v1/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistV1Server).Delete(ctx, req.(*DeletePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaylistV1_ServiceDesc is the grpc.ServiceDesc for PlaylistV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaylistV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "music_player_v1.Playlist_v1",
	HandlerType: (*PlaylistV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PlaylistV1_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PlaylistV1_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PlaylistV1_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PlaylistV1_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playlist.proto",
}
