// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: song.proto

package player_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SongV1Client is the client API for SongV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SongV1Client interface {
	Create(ctx context.Context, in *CreateSongRequest, opts ...grpc.CallOption) (*CreateSongResponse, error)
	Get(ctx context.Context, in *GetSongRequest, opts ...grpc.CallOption) (*GetSongResponse, error)
	Update(ctx context.Context, in *UpdateSongRequest, opts ...grpc.CallOption) (*UpdateSongResponse, error)
	Delete(ctx context.Context, in *DeleteSongRequest, opts ...grpc.CallOption) (*DeleteSongResponse, error)
}

type songV1Client struct {
	cc grpc.ClientConnInterface
}

func NewSongV1Client(cc grpc.ClientConnInterface) SongV1Client {
	return &songV1Client{cc}
}

func (c *songV1Client) Create(ctx context.Context, in *CreateSongRequest, opts ...grpc.CallOption) (*CreateSongResponse, error) {
	out := new(CreateSongResponse)
	err := c.cc.Invoke(ctx, "/music_player_v1.Song_v1/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songV1Client) Get(ctx context.Context, in *GetSongRequest, opts ...grpc.CallOption) (*GetSongResponse, error) {
	out := new(GetSongResponse)
	err := c.cc.Invoke(ctx, "/music_player_v1.Song_v1/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songV1Client) Update(ctx context.Context, in *UpdateSongRequest, opts ...grpc.CallOption) (*UpdateSongResponse, error) {
	out := new(UpdateSongResponse)
	err := c.cc.Invoke(ctx, "/music_player_v1.Song_v1/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songV1Client) Delete(ctx context.Context, in *DeleteSongRequest, opts ...grpc.CallOption) (*DeleteSongResponse, error) {
	out := new(DeleteSongResponse)
	err := c.cc.Invoke(ctx, "/music_player_v1.Song_v1/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SongV1Server is the server API for SongV1 service.
// All implementations must embed UnimplementedSongV1Server
// for forward compatibility
type SongV1Server interface {
	Create(context.Context, *CreateSongRequest) (*CreateSongResponse, error)
	Get(context.Context, *GetSongRequest) (*GetSongResponse, error)
	Update(context.Context, *UpdateSongRequest) (*UpdateSongResponse, error)
	Delete(context.Context, *DeleteSongRequest) (*DeleteSongResponse, error)
	mustEmbedUnimplementedSongV1Server()
}

// UnimplementedSongV1Server must be embedded to have forward compatible implementations.
type UnimplementedSongV1Server struct {
}

func (UnimplementedSongV1Server) Create(context.Context, *CreateSongRequest) (*CreateSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSongV1Server) Get(context.Context, *GetSongRequest) (*GetSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSongV1Server) Update(context.Context, *UpdateSongRequest) (*UpdateSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSongV1Server) Delete(context.Context, *DeleteSongRequest) (*DeleteSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSongV1Server) mustEmbedUnimplementedSongV1Server() {}

// UnsafeSongV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SongV1Server will
// result in compilation errors.
type UnsafeSongV1Server interface {
	mustEmbedUnimplementedSongV1Server()
}

func RegisterSongV1Server(s grpc.ServiceRegistrar, srv SongV1Server) {
	s.RegisterService(&SongV1_ServiceDesc, srv)
}

func _SongV1_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongV1Server).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music_player_v1.Song_v1/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongV1Server).Create(ctx, req.(*CreateSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongV1_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongV1Server).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music_player_v1.Song_v1/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongV1Server).Get(ctx, req.(*GetSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongV1_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongV1Server).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music_player_v1.Song_v1/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongV1Server).Update(ctx, req.(*UpdateSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongV1_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongV1Server).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music_player_v1.Song_v1/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongV1Server).Delete(ctx, req.(*DeleteSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SongV1_ServiceDesc is the grpc.ServiceDesc for SongV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SongV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "music_player_v1.Song_v1",
	HandlerType: (*SongV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SongV1_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SongV1_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SongV1_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SongV1_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "song.proto",
}
